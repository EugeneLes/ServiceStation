package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;
import httpurlconnect.HTTPURLConnection;
import model.Customer;
import model.CustomerTableModel;
import model.Root;
import modelparser.AbstractModelParser;
import modelparser.ParserFactory;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

/**
 * Created by LeskovskijE on 6/29/2017.
 */
public class ServiceStationUI {
    private JButton buttonFilter;
    private JPanel panel1;
    private JRadioButton radioXML;
    private JRadioButton radioJSON;
    private JProgressBar progressBar1;
    private JButton buttonUpdateModel;
    private JTable tableCustomers;

    public ServiceStationUI() {
        JFrame frame = new JFrame("ServiceStation");
        frame.setContentPane(panel1);
        frame.setBounds(100, 100, 600, 600);
        frame.setResizable(false);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        Root root = Controller.getInstance().initializeRootModel();
        ArrayList<Customer> customers = root.getCustomers();

        TableModel model = new CustomerTableModel(customers);
        //JTable table = new JTable(model);
        tableCustomers.setModel(model);
//        createUIComponents();
        buttonUpdateModel.addActionListener(new ButtonClickListener());


    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public void showUI() {
        createUIComponents();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        buttonFilter = new JButton();
        buttonFilter.setText("Filter");
        panel1.add(buttonFilter, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(178, 32), null, 0, false));
        radioXML = new JRadioButton();
        radioXML.setSelected(false);
        radioXML.setText("XML");
        panel1.add(radioXML, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, 26), null, 0, false));
        progressBar1 = new JProgressBar();
        panel1.add(progressBar1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(178, 12), null, 0, false));
        buttonUpdateModel = new JButton();
        buttonUpdateModel.setText("UpdateModel");
        panel1.add(buttonUpdateModel, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(178, 32), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("FileType");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(78, 26), null, 0, false));
        radioJSON = new JRadioButton();
        radioJSON.setSelected(true);
        radioJSON.setText("JSON");
        panel1.add(radioJSON, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, 28), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableCustomers = new JTable();
        tableCustomers.setVerifyInputWhenFocusTarget(true);
        scrollPane1.setViewportView(tableCustomers);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(radioJSON);
        buttonGroup.add(radioXML);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private class ButtonClickListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();

            if (command.equals("UpdateModel")) {
                Controller controller = Controller.getInstance();
                if (radioJSON.isSelected()) {
                    controller.performUpdateModel("JSON");
                } else {
                    controller.performUpdateModel("XML");
                }
            } else if (command.equals("Submit")) {
//                statusLabel.setText("Submit Button clicked.");
            } else {
//                statusLabel.setText("Cancel Button clicked.");
            }
        }
    }

}
